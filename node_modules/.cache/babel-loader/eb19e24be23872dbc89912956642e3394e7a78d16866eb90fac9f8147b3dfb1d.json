{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\Desktop\\\\react12\\\\game\\\\src\\\\component\\\\Game.jsx\",\n  _s = $RefreshSig$();\n// src/components/Game.js\nimport React, { useEffect, useState } from 'react';\nimport VirtualKeyboard from './VirtualKeyboard';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [gameWon, setGameWon] = useState(false);\n  const [attemptsHistory, setAttemptsHistory] = useState([]);\n  const dispatch = useDispatch();\n  const word = useSelector(state => state.RandomWord.randomWord);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [attempts, setAttempts] = useState(0);\n  useEffect(() => {\n    dispatch(getrandomWord());\n  }, [dispatch]);\n  useEffect(() => {\n    if (word && word.length >= 7 && word.split('').every(letter => guessedLetters.includes(letter))) {\n      setGameWon(true);\n    }\n  }, [guessedLetters, word]);\n  const handleLetterClick = letter => {\n    if (!guessedLetters.includes(letter)) {\n      const newGuessedLetters = [...guessedLetters, letter];\n      const newAttempts = attempts + 1;\n      setGuessedLetters(newGuessedLetters);\n      setAttempts(newAttempts);\n      const currentWordState = word.split('').map(letter => newGuessedLetters.includes(letter) ? letter : '_').join('');\n      setAttemptsHistory([...attemptsHistory, {\n        attempt: newAttempts,\n        wordState: currentWordState\n      }]);\n    }\n  };\n  const displayWord = word ? word.split('').map(letter => guessedLetters.includes(letter) ? letter : '_').join(' ') : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: word && word.length >= 7 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Guess the word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: displayWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VirtualKeyboard, {\n        onLetterClick: handleLetterClick,\n        disabledLetters: guessedLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Attempts: \", attempts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), gameWon && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Congratulations! You have guessed the word in \", attempts, \" attempts.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Attempt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Word State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: attemptsHistory.map(({\n            attempt,\n            wordState\n          }, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: attempt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: wordState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"D8h6E/yhQNIuOV6oru/kmTbemeU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","VirtualKeyboard","useSelector","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","gameWon","setGameWon","attemptsHistory","setAttemptsHistory","dispatch","word","state","RandomWord","randomWord","guessedLetters","setGuessedLetters","attempts","setAttempts","getrandomWord","length","split","every","letter","includes","handleLetterClick","newGuessedLetters","newAttempts","currentWordState","map","join","attempt","wordState","displayWord","children","fileName","_jsxFileName","lineNumber","columnNumber","onLetterClick","disabledLetters","index","_c","$RefreshReg$"],"sources":["C:/Users/harsh/Desktop/react12/game/src/component/Game.jsx"],"sourcesContent":["// src/components/Game.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport VirtualKeyboard from './VirtualKeyboard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst Game = () => {\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [attemptsHistory, setAttemptsHistory] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const word = useSelector((state) => state.RandomWord.randomWord);\r\n  const [guessedLetters, setGuessedLetters] = useState([]);\r\n  const [attempts, setAttempts] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(getrandomWord());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (word && word.length >= 7 && word.split('').every(letter => guessedLetters.includes(letter))) {\r\n      setGameWon(true);\r\n    }\r\n  }, [guessedLetters, word]);\r\n\r\n  const handleLetterClick = (letter) => {\r\n    if (!guessedLetters.includes(letter)) {\r\n      const newGuessedLetters = [...guessedLetters, letter];\r\n      const newAttempts = attempts + 1;\r\n      setGuessedLetters(newGuessedLetters);\r\n      setAttempts(newAttempts);\r\n\r\n      const currentWordState = word.split('').map((letter) =>\r\n        newGuessedLetters.includes(letter) ? letter : '_'\r\n      ).join('');\r\n\r\n      setAttemptsHistory([...attemptsHistory, { attempt: newAttempts, wordState: currentWordState }]);\r\n    }\r\n  };\r\n\r\n  const displayWord = word ? word.split('').map((letter) => (\r\n    guessedLetters.includes(letter) ? letter : '_'\r\n  )).join(' ') : '';\r\n\r\n  return (\r\n    <div>\r\n      {word && word.length >= 7 ? (\r\n        <>\r\n          <h1>Guess the word</h1>\r\n          <p>{displayWord}</p>\r\n          <VirtualKeyboard onLetterClick={handleLetterClick} disabledLetters={guessedLetters} />\r\n          <p>Attempts: {attempts}</p>\r\n          {gameWon && <p>Congratulations! You have guessed the word in {attempts} attempts.</p>}\r\n          \r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Attempt</th>\r\n                <th>Word State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {attemptsHistory.map(({ attempt, wordState }, index) => (\r\n                <tr key={index}>\r\n                  <td>{attempt}</td>\r\n                  <td>{wordState}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGvD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMc,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,IAAI,GAAGb,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACC,UAAU,CAACC,UAAU,CAAC;EAChE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAE3CD,SAAS,CAAC,MAAM;IACde,QAAQ,CAACS,aAAa,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEdf,SAAS,CAAC,MAAM;IACd,IAAIgB,IAAI,IAAIA,IAAI,CAACS,MAAM,IAAI,CAAC,IAAIT,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAACC,KAAK,CAACC,MAAM,IAAIR,cAAc,CAACS,QAAQ,CAACD,MAAM,CAAC,CAAC,EAAE;MAC/FhB,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC,EAAE,CAACQ,cAAc,EAAEJ,IAAI,CAAC,CAAC;EAE1B,MAAMc,iBAAiB,GAAIF,MAAM,IAAK;IACpC,IAAI,CAACR,cAAc,CAACS,QAAQ,CAACD,MAAM,CAAC,EAAE;MACpC,MAAMG,iBAAiB,GAAG,CAAC,GAAGX,cAAc,EAAEQ,MAAM,CAAC;MACrD,MAAMI,WAAW,GAAGV,QAAQ,GAAG,CAAC;MAChCD,iBAAiB,CAACU,iBAAiB,CAAC;MACpCR,WAAW,CAACS,WAAW,CAAC;MAExB,MAAMC,gBAAgB,GAAGjB,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAACQ,GAAG,CAAEN,MAAM,IACjDG,iBAAiB,CAACF,QAAQ,CAACD,MAAM,CAAC,GAAGA,MAAM,GAAG,GAChD,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;MAEVrB,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAE;QAAEuB,OAAO,EAAEJ,WAAW;QAAEK,SAAS,EAAEJ;MAAiB,CAAC,CAAC,CAAC;IACjG;EACF,CAAC;EAED,MAAMK,WAAW,GAAGtB,IAAI,GAAGA,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAACQ,GAAG,CAAEN,MAAM,IACnDR,cAAc,CAACS,QAAQ,CAACD,MAAM,CAAC,GAAGA,MAAM,GAAG,GAC5C,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;EAEjB,oBACE7B,OAAA;IAAAiC,QAAA,EACGvB,IAAI,IAAIA,IAAI,CAACS,MAAM,IAAI,CAAC,gBACvBnB,OAAA,CAAAE,SAAA;MAAA+B,QAAA,gBACEjC,OAAA;QAAAiC,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBrC,OAAA;QAAAiC,QAAA,EAAID;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBrC,OAAA,CAACJ,eAAe;QAAC0C,aAAa,EAAEd,iBAAkB;QAACe,eAAe,EAAEzB;MAAe;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtFrC,OAAA;QAAAiC,QAAA,GAAG,YAAU,EAACjB,QAAQ;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1BhC,OAAO,iBAAIL,OAAA;QAAAiC,QAAA,GAAG,gDAA8C,EAACjB,QAAQ,EAAC,YAAU;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAErFrC,OAAA;QAAAiC,QAAA,gBACEjC,OAAA;UAAAiC,QAAA,eACEjC,OAAA;YAAAiC,QAAA,gBACEjC,OAAA;cAAAiC,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChBrC,OAAA;cAAAiC,QAAA,EAAI;YAAU;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRrC,OAAA;UAAAiC,QAAA,EACG1B,eAAe,CAACqB,GAAG,CAAC,CAAC;YAAEE,OAAO;YAAEC;UAAU,CAAC,EAAES,KAAK,kBACjDxC,OAAA;YAAAiC,QAAA,gBACEjC,OAAA;cAAAiC,QAAA,EAAKH;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAClBrC,OAAA;cAAAiC,QAAA,EAAKF;YAAS;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFbG,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACR,CAAC,gBAEHrC,OAAA;MAAAiC,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CArEID,IAAI;EAAA,QAGSL,WAAW,EACfD,WAAW;AAAA;AAAA4C,EAAA,GAJpBtC,IAAI;AAuEV,eAAeA,IAAI;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}