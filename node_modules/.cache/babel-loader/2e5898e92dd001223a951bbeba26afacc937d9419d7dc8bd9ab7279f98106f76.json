{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\Desktop\\\\react12\\\\game\\\\src\\\\component\\\\Game.jsx\",\n  _s = $RefreshSig$();\n// src/components/Game.js\nimport React, { useEffect, useState } from 'react';\nimport VirtualKeyboard from './VirtualKeyboard';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [gameWon, setGameWon] = useState(false);\n  const [attemptsHistory, setAttemptsHistory] = useState([]);\n  const [currentAttempt, setCurrentAttempt] = useState(null); // Track current attempt to replay\n  const dispatch = useDispatch();\n  const word = useSelector(state => state.RandomWord.randomWord);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [attempts, setAttempts] = useState(0);\n  useEffect(() => {\n    dispatch(getrandomWord());\n  }, [dispatch]);\n  useEffect(() => {\n    if (word && word.length >= 7 && word.split('').every(letter => guessedLetters.includes(letter))) {\n      setGameWon(true);\n    }\n  }, [guessedLetters, word]);\n  const handleLetterClick = letter => {\n    if (!guessedLetters.includes(letter)) {\n      const newGuessedLetters = [...guessedLetters, letter];\n      const newAttempts = attempts + 1;\n      setGuessedLetters(newGuessedLetters);\n      setAttempts(newAttempts);\n      const currentWordState = word.split('').map(letter => newGuessedLetters.includes(letter) ? letter : '_').join('');\n      const remainingLetters = word.split('').filter(letter => !newGuessedLetters.includes(letter)).length;\n      setAttemptsHistory([...attemptsHistory, {\n        attempt: newAttempts,\n        remainingLetters\n      }]);\n    }\n  };\n  const displayWord = word ? word.split('').map(letter => guessedLetters.includes(letter) ? letter : '_').join(' ') : '';\n  const handleReplayClick = attempt => {\n    setCurrentAttempt(attempt);\n    // Reset game state to the state of the selected attempt\n    const selectedAttempt = attemptsHistory.find(item => item.attempt === attempt);\n    if (selectedAttempt) {\n      setGuessedLetters([]);\n      setAttempts(selectedAttempt.attempt);\n      setAttemptsHistory(attemptsHistory.slice(0, attempt - 1));\n      setGameWon(false); // Reset game won state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: word && word.length >= 7 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Guess the word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: displayWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VirtualKeyboard, {\n        onLetterClick: handleLetterClick,\n        disabledLetters: guessedLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Attempts: \", attempts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), gameWon ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Congratulations! You have guessed the word in \", attempts, \" attempts.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click on any attempt number below to replay:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: attemptsHistory.map(({\n            attempt\n          }) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleReplayClick(attempt),\n            children: [\"Attempt \", attempt]\n          }, attempt, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Attempt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining Letters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: attemptsHistory.map(({\n            attempt,\n            remainingLetters\n          }, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: attempt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: remainingLetters\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"k9DP/xqABy0UEAHzBAEhudFZLNo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","VirtualKeyboard","useSelector","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","gameWon","setGameWon","attemptsHistory","setAttemptsHistory","currentAttempt","setCurrentAttempt","dispatch","word","state","RandomWord","randomWord","guessedLetters","setGuessedLetters","attempts","setAttempts","getrandomWord","length","split","every","letter","includes","handleLetterClick","newGuessedLetters","newAttempts","currentWordState","map","join","remainingLetters","filter","attempt","displayWord","handleReplayClick","selectedAttempt","find","item","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","onLetterClick","disabledLetters","onClick","index","_c","$RefreshReg$"],"sources":["C:/Users/harsh/Desktop/react12/game/src/component/Game.jsx"],"sourcesContent":["// src/components/Game.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport VirtualKeyboard from './VirtualKeyboard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst Game = () => {\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [attemptsHistory, setAttemptsHistory] = useState([]);\r\n  const [currentAttempt, setCurrentAttempt] = useState(null); // Track current attempt to replay\r\n  const dispatch = useDispatch();\r\n  const word = useSelector((state) => state.RandomWord.randomWord);\r\n  const [guessedLetters, setGuessedLetters] = useState([]);\r\n  const [attempts, setAttempts] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(getrandomWord());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (word && word.length >= 7 && word.split('').every(letter => guessedLetters.includes(letter))) {\r\n      setGameWon(true);\r\n    }\r\n  }, [guessedLetters, word]);\r\n\r\n  const handleLetterClick = (letter) => {\r\n    if (!guessedLetters.includes(letter)) {\r\n      const newGuessedLetters = [...guessedLetters, letter];\r\n      const newAttempts = attempts + 1;\r\n      setGuessedLetters(newGuessedLetters);\r\n      setAttempts(newAttempts);\r\n\r\n      const currentWordState = word.split('').map((letter) =>\r\n        newGuessedLetters.includes(letter) ? letter : '_'\r\n      ).join('');\r\n\r\n      const remainingLetters = word.split('').filter(letter => !newGuessedLetters.includes(letter)).length;\r\n\r\n      setAttemptsHistory([...attemptsHistory, { attempt: newAttempts, remainingLetters }]);\r\n    }\r\n  };\r\n\r\n  const displayWord = word ? word.split('').map((letter) => (\r\n    guessedLetters.includes(letter) ? letter : '_'\r\n  )).join(' ') : '';\r\n\r\n  const handleReplayClick = (attempt) => {\r\n    setCurrentAttempt(attempt);\r\n    // Reset game state to the state of the selected attempt\r\n    const selectedAttempt = attemptsHistory.find(item => item.attempt === attempt);\r\n    if (selectedAttempt) {\r\n      setGuessedLetters([]);\r\n      setAttempts(selectedAttempt.attempt);\r\n      setAttemptsHistory(attemptsHistory.slice(0, attempt - 1));\r\n      setGameWon(false); // Reset game won state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {word && word.length >= 7 ? (\r\n        <>\r\n          <h1>Guess the word</h1>\r\n          <p>{displayWord}</p>\r\n          <VirtualKeyboard onLetterClick={handleLetterClick} disabledLetters={guessedLetters} />\r\n          <p>Attempts: {attempts}</p>\r\n          {gameWon ? (\r\n            <p>Congratulations! You have guessed the word in {attempts} attempts.</p>\r\n          ) : (\r\n            <>\r\n              <p>Click on any attempt number below to replay:</p>\r\n              <div>\r\n                {attemptsHistory.map(({ attempt }) => (\r\n                  <button key={attempt} onClick={() => handleReplayClick(attempt)}>\r\n                    Attempt {attempt}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Attempt</th>\r\n                <th>Remaining Letters</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {attemptsHistory.map(({ attempt, remainingLetters }, index) => (\r\n                <tr key={index}>\r\n                  <td>{attempt}</td>\r\n                  <td>{remainingLetters}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}